package minsupgsp;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * Created by Thomas Dutta on 9/20/15.
 * This class is used to represent a FrequentItemSet, (inherited from Sequence class)
 * It is used to represent the candidate set and frequent item set generated by the algorithm
 */


public class FrequentItemSet extends Sequence {

    int mOccurrenceCount;
    float mSupportValue;
    float mMinimumSupport;
    float mMaximumSupport;
    ArrayList<Integer> arrayRepresentationOfEntireItemSet;
    ArrayList<Float> arrayOfMISValues;


    public FrequentItemSet() {
        super();
        mOccurrenceCount = 0;
        mSupportValue = 0.0f;
        mMinimumSupport = 0.0f;
        mMaximumSupport = 0.0f;
    }

    public FrequentItemSet(ArrayList<Element> arrayOfElements) {
        super(arrayOfElements);
        populateArray();
        mOccurrenceCount = 0;
        mSupportValue = 0.0f;
        mMinimumSupport = 0.0f;
        mMaximumSupport = 0.0f;
    }

    public FrequentItemSet(Element element) {
        super(element);
        populateArray();
        mOccurrenceCount = 0;
        mSupportValue = 0.0f;
        mMinimumSupport = 0.0f;
        mMaximumSupport = 0.0f;
    }

    public FrequentItemSet(FrequentItemSet frequentItemSet) {
     //   super(frequentItemSet.getArrayOfElements());
        this.arrayOfElements = new ArrayList<Element>();
        for (Element element : frequentItemSet.getArrayOfElements() ) {
            //dirty fix for CandidateGeneration
            Element tempElement = new Element(element);
            this.arrayOfElements.add(tempElement);
        }
        this.mNumberOfElements = this.arrayOfElements.size();
        this.mNumberOfItems = 0;
        for (Element element : this.arrayOfElements) {
            mNumberOfItems = mNumberOfItems + element.getArrayOfItems().size();
        }
        this.populateArray();
        mOccurrenceCount = frequentItemSet.getOccurrenceCount();
        mSupportValue = frequentItemSet.getSupportValue();
        mMinimumSupport = frequentItemSet.getMinimumSupport();
        mMaximumSupport = frequentItemSet.getMaximumSupport();
    }

    public void populateArray () {
        this.arrayRepresentationOfEntireItemSet = new ArrayList<Integer>();
        for(Element element : arrayOfElements ) {
            for(Integer item : element.getArrayOfItems()) {
                this.arrayRepresentationOfEntireItemSet.add(item);
            }
        }
    }

    public int getOccurrenceCount() {
        return mOccurrenceCount;
    }

    public void setOccurrenceCount(int mCount) {
        this.mOccurrenceCount = mCount;
    }

    public float getSupportValue() {
        return mSupportValue;
    }

    public void setSupportValue(float actualSupport) {
        this.mSupportValue = actualSupport;
    }

    public float getMinimumSupport() {
        return mMinimumSupport;
    }

    public void setMinimumSupport(float minimumSupport) {
        this.mMinimumSupport = minimumSupport;
    }

    public float getMaximumSupport() {
        return mMaximumSupport;
    }

    public void setMaximumSupport(float maximumSupport) {
        this.mMaximumSupport = maximumSupport;
    }


    public ArrayList<Integer> getArrayRepresentationOfEntireSequence() {
        return arrayRepresentationOfEntireItemSet;
    }


    public String printFormattedFrequentItemSet() {
        String tempString = "<";
        for (Element element : this.arrayOfElements) {
            tempString = tempString.concat(element.printFormattedElementItems());
        }
        tempString = tempString.concat(">");
        return tempString;
    }

    public FrequentItemSet getFrequentItemSetWithoutNthItem (int position) {
        FrequentItemSet frequentItemSet = new FrequentItemSet();
        ArrayList<Element> aElements = new ArrayList<Element>();
        Element element= new Element();
        int lowerCount = 0;
        int upperCount = 0;
        for (Element tempElement : arrayOfElements) {
            upperCount = lowerCount + tempElement.getNumberOfItems();
            element = new Element(tempElement);
//            System.out.println(element.printFormattedElementItems());
            if ((position - 1) >= lowerCount && (position - 1) < upperCount) {
                element.removeItemByIndex(position - lowerCount);
            }
//            System.out.println(element.printFormattedElementItems());
            if (element.getNumberOfItems() > 0) {
                aElements.add(element);
            }
            lowerCount = upperCount;
        }
        frequentItemSet = new FrequentItemSet(aElements);
        return frequentItemSet;

    }
    public boolean isEqual (FrequentItemSet frequentItemSet) {
        if(this.mNumberOfElements == frequentItemSet.getNumberOfElements() &&
                this.mNumberOfItems == frequentItemSet.getNumberOfItems()) {
            for(int i=0; i< this.mNumberOfElements; ++i) {
                if(!this.arrayOfElements.get(i).isEqual(frequentItemSet.getArrayOfElements().get(i))){
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    public void populateMinMaXMISValues(HashMap<Integer, Item> hmapItemMetaData) {
        this.populateArray();
        float maxMIS=-1111.00f;
        float minMIS=1111.00f;
        for (Element element : getArrayOfElements()) {
            for(Integer item : element.getArrayOfItems()) {
                maxMIS = Math.max(hmapItemMetaData.get(item).getMinimumItemSupport(), maxMIS);
                minMIS = Math.min(hmapItemMetaData.get(item).getMinimumItemSupport(), minMIS);
            }
        }
        this.mMinimumSupport = minMIS;
        this.mMaximumSupport = maxMIS;
    }

    public FrequentItemSet mergeTwoFrequentItemSet (FrequentItemSet frequentItemSet) {
        FrequentItemSet tempFrequentItemset = new FrequentItemSet(this);
        if( frequentItemSet.getArrayOfElements().get(frequentItemSet.getNumberOfElements()-1).getNumberOfItems() == 1 ){
            System.out.print("Implement Later");
        }

        return tempFrequentItemset;
    }


    public void populateArrayMIS(HashMap<Integer, Item> hmapItemMetaData) {
        if(arrayOfMISValues == null ) {
            arrayOfMISValues =  new ArrayList<Float>();
            for (Element element : getArrayOfElements()) {
                for (Integer item : element.getArrayOfItems()) {
                    arrayOfMISValues.add(hmapItemMetaData.get(item).getMinimumItemSupport());
            }   }
        }
    }

    public boolean ifFirstItemHasStrictlyLeastMIS() {
        float minMIS = arrayOfMISValues.get(0);
        for(int i=1; i< arrayOfMISValues.size(); ++i) {
            if(arrayOfMISValues.get(i) <= minMIS ) {
                return false;
            }
        }
        return true;
    }

    public boolean ifLastItemHasStrictlyLeastMIS() {
        float minMIS = arrayOfMISValues.get(arrayOfMISValues.size()-1);
        for(int i=0; i< arrayOfMISValues.size()-1; ++i) {
            if(arrayOfMISValues.get(i) <= minMIS ) {
                return false;
            }
        }
        return true;
    }

    public float getMISValueByPosition(int position) {
        if(position > 0 && position <= arrayOfMISValues.size()) {
            return arrayOfMISValues.get(position - 1);
        }
        return -100.00f;
    }

    public ArrayList<Float> getArrayOfMISValues() {
        return arrayOfMISValues;
    }

    public void appendElement(Element element) {
        Element element1 = new Element(element);
        arrayOfElements.add(element1);
        this.populateArray();
        this.mNumberOfItems =this.mNumberOfItems+element.getNumberOfItems();
        this.mNumberOfElements =this.mNumberOfElements+1;
    }

    public void appendItemToLastElement(Integer item) {
        arrayOfElements.get(mNumberOfElements-1).appendItem(item);
        this.mNumberOfItems = this.mNumberOfItems+1;
    }


}
